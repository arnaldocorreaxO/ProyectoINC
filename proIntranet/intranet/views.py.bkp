import pyodbc
import IfxPy
import time
import io as StringIO
from xhtml2pdf import pisa
#from django.template.loader import get_template
from django.template import Context
#from django.http import HttpResponse
from cgi import escape

from io import BytesIO
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse
from django.template.loader import render_to_string
from django.views.generic import View
from django.shortcuts import render, render_to_response
from django.template import RequestContext
from django.utils import timezone
from django.views.generic.list import ListView
from django.template.loader import get_template
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User

#from jinja2 import Environment, FileSystemLoader
from weasyprint import HTML, CSS
from proIntranet import settings
"""
https://simpleisbetterthancomplex.com/tutorial/2016/08/08/how-to-export-to-pdf.html
bajar GTK descomprimir en C:\\msys2\\mingw64
https://weasyprint.readthedocs.io/en/latest/install.html#step-5-run-weasyprint
"""

from proIntranet.utils import * #created in step 4
from .models import *

from .forms import *

from django.urls import reverse_lazy
from django.views.generic import ListView
from django.views.generic.detail import DetailView 
from django.views.generic.edit import (CreateView,UpdateView,DeleteView)
from django.contrib.auth.mixins import PermissionRequiredMixin


class PublicacionList(ListView):
  model = Publicacion
  def get_queryset(self):
        return Publicacion.objects.order_by('-fecha')[:10]

class PublicacionDetail(DetailView):
  model = Publicacion

class PublicacionCreate(PermissionRequiredMixin,CreateView):
  permission_required = 'intranet.add_publicacion'
  model = Publicacion
  form_class = PublicacionForm
  success_url = reverse_lazy('publicacion:list')
  #fields = '__all__'

class PublicacionUpdate(PermissionRequiredMixin,UpdateView):
  permission_required = 'intranet.change_publicacion'
  model = Publicacion
  success_url = reverse_lazy('publicacion:list')
  fields = '__all__'

class PublicacionDelete(PermissionRequiredMixin,DeleteView):
  permission_required = 'intranet.delete_publicacion'
  model = Publicacion
  success_url = reverse_lazy('publicacion:list')
  #fields = __all__


class AvisoListView(ListView):
    model = Aviso
    #template_name = 'intranet/avisos_list.html'
    def get_queryset(self):
        return Aviso.objects.order_by('-fecha')[:5]


class AvisoListView(ListView):
    model = Aviso
    #template_name = 'intranet/avisos_list.html'
    def get_queryset(self):
        return Aviso.objects.order_by('-fecha')[:5]

    #paginate_by = 100  # if pagination is desired
    """
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['now'] = timezone.now()
        return context
        """
def ListaAvisos(request):
    #aviso = Aviso.objects.all()
    #recibos = recibo(pCedula='1499876',pMes='1',pAnho='2019')  
    recibos = recibo(pCedula='4647857',pMes='7',pAnho='2019')  
    #recibos = recibo(pCedula='3656791',pMes='7',pAnho='2019')  
    #recibos = recibo(pCedula='2097345',pMes='1',pAnho='2019') 
    #recibos = recibo(pCedula='2097345',pMes='1',pAnho='2019') 
    #recibos = recibo(pCedula='1579526',pMes='7',pAnho='2019') 
    #recibos = recibo(pCedula='3588321',pMes='7',pAnho='2019') 
    
    """return render_to_response('aviso_list.html',{'object_list':aviso})"""
    return render_to_response('pdf/recibo_pdf.html',{'recibos':recibos,})

def index(request):
    """List existing posts."""
    return render(request, 'base.html', {'posts': ''})


def recibo(**Kwargs):
    ####################################################################  
    #IFXPY NECESITA QUE ESTEN DEFINIDOS LOS CLIENTES INFORMIX CLIENT SDK
    ####################################################################
    #CENTRAL
    IFX_CEN_HOST = '10.130.10.250'
    IFX_CEN_SERVER = 'ol_informix1170'
    IFX_CEN_SERVICE = '22767'
    IFX_CEN_DB = 'pl4sjasu'
    #VILLETA
    IFX_VTA_HOST = '192.100.100.8'
    IFX_VTA_SERVER = 'ol_platino'
    IFX_VTA_SERVICE = '1530'
    IFX_VTA_DB = 'pl4sjpvi'
    #VALLEMI
    IFX_VMI_HOST = '192.168.100.7'
    IFX_VMI_SERVER = 'ol_informix1171'
    IFX_VMI_SERVICE = '22767'
    IFX_VMI_DB = 'pl4sjvalle'
    

    #CONEXION DEFAULT
    IFX_HOST = IFX_CEN_HOST
    IFX_SERVER = IFX_CEN_SERVER
    IFX_SERVICE = IFX_CEN_SERVICE
    IFX_DB = IFX_CEN_DB
    #COMUN
    IFX_USER = 'informix'
    IFX_PASS ='cnumtc'

    vSede = Kwargs['pSede']
        
    if vSede == 'VTA':
      #CONEXION VILLETA
      IFX_HOST = IFX_VTA_HOST
      IFX_SERVER = IFX_VTA_SERVER
      IFX_SERVICE = IFX_VTA_SERVICE
      IFX_DB = IFX_VTA_DB        
    elif vSede == 'VMI':
      #CONEXION VALLEMI
      IFX_HOST = IFX_VMI_HOST
      IFX_SERVER = IFX_VMI_SERVER
      IFX_SERVICE = IFX_VMI_SERVICE
      IFX_DB = IFX_VMI_DB        
        
    #CADENA DE CONEXION
    ConStr = "SERVER=%s;DATABASE=%s;HOST=%s;SERVICE=%s;UID=%s;PWD=%s;" % (IFX_SERVER,IFX_DB,IFX_HOST,IFX_SERVICE,IFX_USER,IFX_PASS)
    #print(ConStr)
    try:
        # netstat -a | findstr  9088
        conn = IfxPy.connect( ConStr, "", "")
    except Exception as e:
        print ('ERROR: Falla de conexion INFORMIX')
        print ( e )
        quit()
    
    #TIPO DE RECIBO
    vTipo = Kwargs['pTipo']
    
    if vTipo in ('NOR','AGU'):     
      #CONSULTA SQL 
      sql = """
                select * ,
                TO_CHAR(sjhst.ddma_emis,'%d/%m/%Y') as fecha, 
                fnc_nombre_mes(mmes)                as nombre_mes 
                FROM
                sjdoc, sjhst, sjsit, sjcol, sjdiv, outer(sjdpt), outer(sjsec), 
                pscon, sjtem, pscco, sjpag, outer(sjsba), outer(sjcar) 
                where 1 = 1
                AND sjdoc.lega = sjhst.lega 
                
                AND sjhst.lega = {pLegajo}
                AND sjhst.mmes = {pMes}
                AND sjhst.aano = {pAnho}
                and sjhst.lega = sjsit.lega and sjhst.conl = sjcol.conl 
                and sjhst.ccos = pscco.ccos and sjhst.conc = pscon.conc 
                and sjsit.tipo_empl = sjtem.tipo_empl 
                and sjsit.divi = sjdiv.divi and sjsit.depa = sjdpt.depa 
                and sjsit.secc = sjsec.secc and sjsit.cent_pago = sjpag.cent_pago 
                and sjsit.carg = sjcar.carg and pscon.tipo = '{pTipo}'
                and sjcol.patr_empl = 'E' and sjsit.foli = sjsit.foli_baja 
                and sjsit.lega = sjsba.lega and sjsit.mone = sjsba.mone 
                and sjsba.ddma_vige = (SELECT max(ddma_vige) 
                            FROM sjsba b 
                            WHERE b.lega = sjsba.lega 
                            AND b.ddma_vige <= sjhst.ddma_emis) 
                and sjhst.foli = sjhst.foli_baja
                and sjhst.conl not in (select conc from sjcoc)
                and sjhst.conl not in (select conl from sjcoc)
                order by sjhst.lega ASC, sjhst.conl ASC, sjhst.dbcr ASC
            """.format(**Kwargs)
              #.format(Kwargs['pCedula'],Kwargs['pLegajo'],Kwargs['pMes'],Kwargs['pAnho'])
        #print(sql)
    else:
      sql = """
                select * ,
                TO_CHAR(sjhst.ddma_emis,'%d/%m/%Y') as fecha, 
                fnc_nombre_mes(mmes)                as nombre_mes 
                FROM
                sjdoc, sjhst, sjsit, sjcol, sjdiv, outer(sjdpt), outer(sjsec), 
                pscon, sjtem, pscco, sjpag, outer(sjsba), outer(sjcar) 
                where 1 = 1
                AND sjdoc.lega = sjhst.lega 
                
                AND sjhst.lega = {pLegajo}
                AND sjhst.mmes = {pMes}
                AND sjhst.aano = {pAnho}
                AND sjcol.conl = {pTipo}
                and sjhst.lega = sjsit.lega and sjhst.conl = sjcol.conl 
                and sjhst.ccos = pscco.ccos and sjhst.conc = pscon.conc 
                and sjsit.tipo_empl = sjtem.tipo_empl 
                and sjsit.divi = sjdiv.divi and sjsit.depa = sjdpt.depa 
                and sjsit.secc = sjsec.secc and sjsit.cent_pago = sjpag.cent_pago 
                and sjsit.carg = sjcar.carg and pscon.tipo = 'NOR'
                and sjcol.patr_empl = 'E' and sjsit.foli = sjsit.foli_baja 
                and sjsit.lega = sjsba.lega and sjsit.mone = sjsba.mone 
                and sjsba.ddma_vige = ( SELECT max(ddma_vige) 
                            FROM sjsba b 
                            WHERE b.lega = sjsba.lega 
                            AND b.ddma_vige <= sjhst.ddma_emis) 
                and sjhst.foli = sjhst.foli_baja
                
                
                order by sjhst.lega ASC, sjhst.conl ASC, sjhst.dbcr ASC
            """.format(**Kwargs)
              #.format(Kwargs['pCedula'],Kwargs['pLegajo'],Kwargs['pMes'],Kwargs['pAnho'])
        #print(sql)

    stmt = IfxPy.exec_immediate(conn, sql)
    dic = IfxPy.fetch_assoc(stmt)
    #print(dictionary)
    lista = []
    while dic != False:
        lista.append(dic)        
        dic = IfxPy.fetch_assoc(stmt)
    #print(lista)
    return lista

def asistencia(**Kwargs):
    vSede = Kwargs['pSede']
    if (vSede == 'CEN' or vSede == 'VTA'):
      """  
      #IfxPy necesita que esten definidos los clientes Informix Client SDK
      """
      
      ConStr = "SERVER=ol_informix1170;DATABASE=pl4sjasu;HOST=10.130.10.250;SERVICE=22767;UID=informix;PWD=cnumtc;"
      if vSede == 'VTA':        
      #ConStr = "SERVER=ol_informix1171;DATABASE=pl4sjvalle;HOST=192.168.100.7;SERVICE=22767;UID=informix;PWD=cnumtc;"
          ConStr = "SERVER=ol_platino;DATABASE=pl4sjpvi;HOST=192.100.100.8;SERVICE=1530;UID=informix;PWD=cnumtc;"

      try:
          # netstat -a | findstr  9088
          conn = IfxPy.connect( ConStr, "", "")
      except Exception as e:
          print ('ERROR: Connect failed')
          print ( e )
          quit()

    # Select records
      sql = """
                SELECT  ashst.ddma_emis  as fec_emision,
                        ((CASE WHEN LEN(TRIM(ashst.hora_sali)) > 0 THEN 
                                   TO_DATE(ashst.hora_sali,"%Y-%m-%d %H:%M") 
                              ELSE NULL END -
                        (CASE WHEN LEN(TRIM(ashst.hora_entr)) > 0 THEN 
                                   TO_DATE(ashst.hora_entr,"%Y-%m-%d %H:%M") 
                              ELSE NULL END
                        ))::INTERVAL SECOND(6) TO SECOND)::VARCHAR(12)::INT/3600 as hora_trab,                      
                        sjsit.lega, sjsit.nomb, sjsit.apel, sjsit.divi, 
                        sjsit.depa, sjsit.secc, sjsit.foli, sjsit.foli_baja, 
                        ashst.lega, ashst.hora_tipo, ashst.turn, ashst.ddma_emis, 
                        CASE WHEN LEN(TRIM(ashst.hora_entr)) > 0 THEN 
                                  TO_DATE(ashst.hora_entr,"%Y-%m-%d %H:%M") 
                             ELSE NULL 
                         END AS hora_entr,
                        CASE WHEN LEN(TRIM(ashst.hora_sali)) > 0 THEN 
                                  TO_DATE(ashst.hora_sali,"%Y-%m-%d %H:%M") 
                             ELSE NULL 
                         END AS hora_sali,
                        ashst.tipo_entr, 
                        ashst.ccos, sjdiv.nomb_divi, sjdpt.nomb_depa, 
                        sjsec.nomb_secc, ashot.nomb_hora_tipo, 
                        astur.hora_ent1, astur.hora_sal1, pscco.nomb_ccos,
                        ashst.conl,ashst.moti_ause 
                  FROM  sjsit, OUTER(sjdiv), OUTER(sjdpt), OUTER(sjsec), 
                        ashst, ashot, OUTER(astur), OUTER pscco , OUTER(sjcol), 
                        sjpag, sjdoc 
                 WHERE 1 = 1
                   and ashst.lega = {pLegajo} 
                   
                   and ashst.ddma_emis >=TO_DATE("{pFechaDesde}","%Y-%m-%d")
                   and ashst.ddma_emis <=TO_DATE("{pFechaHasta}","%Y-%m-%d")
                   and sjdoc.lega = ashst.lega
                   and sjsit.lega = ashst.lega 
                   and sjsit.divi = sjdiv.divi 
                   and sjsit.depa = sjdpt.depa 
                   and sjsit.secc = sjsec.secc 
                   and sjsit.cent_pago = sjpag.cent_pago 
                   and sjsit.foli = sjsit.foli_baja 
                   and ashst.hora_tipo = ashot.hora_tipo 
                   and ashst.turn = astur.turn 
                   and ashst.ccos = pscco.ccos 
                   and ashst.foli = ashst.foli_baja 
                   and ashst.conl = sjcol.conl
                   ORDER BY 1 
            """.format(**Kwargs)
              #.format(Kwargs['pCedula'],Kwargs['pLegajo'],Kwargs['pMes'],Kwargs['pAnho'])
      #print(sql)

      stmt = IfxPy.exec_immediate(conn, sql)
      dic = IfxPy.fetch_assoc(stmt)
      #print(dic)
      lista = []
      while dic != False:
          lista.append(dic)        
          dic = IfxPy.fetch_assoc(stmt)
      return lista
    
            

def ver_recibo2(request):
    return render(
        request=request,
        template_name='pdf/recibo_pdf.html',
    )
    
@login_required
def ver_recibo(request):
    """Sign up view."""
    usuario = None
    if request.method == 'POST':
        form = pReciboForm(request.POST) 
        if form.is_valid():
            data = form.cleaned_data
            print(data)
            result = recibo(**data)
            #print(form)
            # render_to_response con context_instance is deprecated in django 1.8
            # return render_to_response('pdf/recibo_pdf.html',{'recibos':result},context_instance=RequestContext(request))
            return render(
              request=request,
              template_name='pdf/recibo_pdf.html',
              context={'recibos':result})
    else:
        form = pReciboForm()
        usuario = {'sede':str(request.user.perfil.sede),'cedula':request.user.username, 'legajo':str(request.user.perfil.legajo)}
        #User.objects.filter(username=request.user.username)
        
    return render(
        request=request,
        template_name='ver_recibo.html',
        context={'form': form, 'usuario':usuario}
    )

@login_required
def ver_asistencia(request):
    """Sign up view."""
    usuario = None
    if request.method == 'POST':
        form = pAsistenciaForm(request.POST) 
        if form.is_valid():
            data = form.cleaned_data
            print(data)
            result = asistencia(**data)
            #print(result)
            # return render_to_response('pdf/asistencia_pdf.html',{'asistencias':result, 'data':data})
            return render(
              request=request,
              template_name='pdf/asistencia_pdf.html',
              context={'asistencias':result, 'data':data})
    else:
        form = pAsistenciaForm()
        usuario = {'sede':str(request.user.perfil.sede),'cedula':request.user.username, 'legajo':str(request.user.perfil.legajo)}
    return render(
        request=request,
        template_name='ver_asistencia.html',
        context={'form': form,'usuario':usuario}
    )    



def html_to_pdf_view(url):

    from selenium import webdriver
    import time
    import os
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    driver = webdriver.Chrome('c://chromedriver//chromedriver.exe')  # Optional argument, if not specified will search path.
    #driver.get('http://www.google.com/xhtml');

    #driver = webdriver.PhantomJS("C://phantomjs-2.1.1-windows//bin//phantomjs.exe")
   # data = recibo(pCedula='3248983',pMes='7',pAnho='2019',pLegajo='3074')
    #driver.get('http://130.10.10.97:8000/ver_recibo2/')
    driver.get(url)
    #html_source = driver.page_source 
    #html_source = driver.page_source 
    #html_source = driver.execute_script("return document.documentElement.outerHTML")
    env = Environment(loader=FileSystemLoader('.'))
    template = env.get_template("pdf/asistencia_pdf.html")
    template_vars = {'asistencias':result, 'data':data}
    html_out = template.render(template_vars)
        
    #print(html)
   # data = recibo(pCedula='4647857',pMes='7',pAnho='2019')
   # html_string = render_to_string('pdf/recibo_pdf.html', {"recibos":data,})
    html = HTML(string = html_source)
    css = BASE_DIR+"/static/vendor/fontawesome-free/css/all.min.css"
    css2 = BASE_DIR+"/static/vendor/datatables/dataTables.bootstrap4.css"
    css3 = BASE_DIR+"/static/css/sb-admin.css"





    css  = CSS(filename=css)
    css2 = CSS(filename=css2)
    css3 = CSS(filename=css3)
    filename = '/tmp/mypdf.pdf'
    
    
    #html.write_pdf(filename, stylesheets=[css, "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"])
    html.write_pdf(filename, stylesheets=[css,css2,css3])

    fs = FileSystemStorage('/tmp')
    with fs.open('mypdf.pdf') as pdf:
        response = HttpResponse(pdf, content_type='application/pdf')
        response['Content-Disposition'] = 'inline; filename="mypdf.pdf"'
        return response

    return response



def myview(request):
    #Retrieve data or whatever you need
    return render_to_pdf(
            'pdf/asistencia_pdf.html',
            {
                'pagesize':'A4',
                'mylist': results,
            }
        )



def ver_asistencia_pdf(request):
    """Sign up view."""
    if request.method == 'POST':
        form = pAsistenciaForm(request.POST) 
        if form.is_valid():
            data = form.cleaned_data
            print(data)
            results = asistencia(**data)
            #print(result)
            #return 

            
            env = Environment(loader=FileSystemLoader(settings.TEMPLATES[0].get('DIRS')))
            print(settings.TEMPLATES[0].get('DIRS'))
            
            template = env.get_template("pdf/asistencia_pdf.html")
            template_vars = {'asistencias':result, 'data':data}
            html_out = template.render(template_vars)
    
            #print(html)
            # data = recibo(pCedula='4647857',pMes='7',pAnho='2019')
            # html_string = render_to_string('pdf/recibo_pdf.html', {"recibos":data,})
            html = HTML(string = html_out)
            css = BASE_DIR+"/static/vendor/fontawesome-free/css/all.min.css"
            css2 = BASE_DIR+"/static/vendor/datatables/dataTables.bootstrap4.css"
            css3 = BASE_DIR+"/static/css/sb-admin.css"
            css  = CSS(filename=css)
            css2 = CSS(filename=css2)
            css3 = CSS(filename=css3)
            filename = '/tmp/mypdf.pdf'
            
    
            #html.write_pdf(filename, stylesheets=[css, "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"])
            html.write_pdf(filename, stylesheets=[css,css2,css3])

            fs = FileSystemStorage('/tmp')
            with fs.open('mypdf.pdf') as pdf:
                response = HttpResponse(pdf, content_type='application/pdf')
                response['Content-Disposition'] = 'inline; filename="mypdf.pdf"'
            return response

        return response
  
    else:
        form = pAsistenciaForm()
    return render(
        request=request,
        template_name='ver_asistencia.html',
        context={'form': form}
    )
